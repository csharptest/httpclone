<?xml version="1.0"?>
<configuration>
  <configSections>
    <section name="HttpCloneConfig" type="CSharpTest.Net.HttpClone.Config, HttpClone"/>
  </configSections>

  <appSettings>
    <!-- The path we will store all site data within, creating a sub-directory for each domain, may be realtive to the bin directory. -->
    <add key="StorePath" value="Store"/>
    <!-- The path we will store log files within, may be realtive to the bin directory. -->
    <add key="LogPath" value="Log"/>
    <!-- The level of output for the log file, may be one of the following: None, Critical, Error, Warning, Info, Verbose. -->
    <add key="LogLevel" value="Verbose"/>
  </appSettings>
  <!--
    This configuration is for ALL sites/domains you interact with using the command-line application.  If you want to have 
    different configurations based on the domain, simply save the "<HttpCloneConfig..." element in a new file called 
    "httpclone.config" at the root of your site's storage directory, i.e. $(StorePath)\sitedomain.com\httpclone.config
    
    The following example was built for http://w3example.wordpress.com/
  -->
  <HttpCloneConfig xsi:noNamespaceSchemaLocation="HttpCloneConfig.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <!-- Ignore all urls that begin with -->
    <exclude>/wp-admin</exclude>
    <exclude>/osd.xml</exclude>
    <exclude>/comments/feed/</exclude>
    <exclude>/?pushpress=hub</exclude>
    <exclude>/search/%00/feed/rss2/</exclude>
    
    <!-- Be sure to grab this url, even if the link is not found -->
    <include>/feed/</include>

    <!-- When exporting to the local file system in HTML, remove this pattern from the name -->
    <bad-name-chars-expression>[^\w\.\-_]+</bad-name-chars-expression>

    <!-- This is probably the trickiest section, all about how to make search work -->
    <search 
      template-uri="/?s=%00"><!-- The template-uri is the page we will use to produce a results template from -->

      <!-- All the rest of the xpaths in this section will be evaluated from the following node -->
      <xpath-base xpath="/html/body/div[@class='content-background']/div[@class='wrapper']/div[@id='content']" />

      <!-- First we need to identify the html form element that has our search-box in it -->
      <form xpath="/html/body/div[@id='footer']//form[@id='search_form']"/>
      
      <!-- When indexing content we use the title found at this path -->
      <title max-length="1024" xpath=".//h1/text()" />
      <!-- We can create a short-blurb of the post by looking for the first paragraph with text -->
      <blurb max-length="300" xpath=".//div[p][1]" />
      <!-- The date of the post can parsed from the following location and format -->
      <date xpath="div[@id='post-1']/div[@class='post-header']//div[@class='date']" format="MMMM d, yyyy" />

      <!-- <h1 class="pagetitle">Search results for "asdf"</h1> -->
      <terms-xpath   xpath="h1[@class='pagetitle']/text()" replace="replace" />
      <results-xpath xpath="div[1]" replace="replace" />

      <index>
        <!-- The following elements should have all their contianing text indexed -->
        <add xpath="."/>
      </index>

      <exclude>
        <!-- Do not index the page if this xpath finds an element -->
        <if xpath="div[@class='entries']" />
        <if xpath="div[@id='post-2']" />
      </exclude>
    </search>
    
    <!-- The handling of HTML content -->
    <doc-type type="html" mime="text/html" ext=".html" relative-links="true" text-links="true">
      
      <!-- The following expression will locate an appropriate title for this page/file -->
      <title expression="&lt;title>([^%&lt;]+?)(?:\s*« w3example\s*)?&lt;/title>" group_id="1" />
      
      <!-- The following is also a valid HTML mime type -->
      <alias mime="text/html+xml" />

      <!-- When optimizing this type of file, we perform the following operations -->
      <optimizing>
        <!-- Things to remove from the content -->
        <remove>
          <tag name="meta" />
          <tag name="link" where="rel!=stylesheet|pingback" />
          <tag name="link" where="href=comments/feed/" />
          <tag name="link" where="type=application/json+oembed|application/xml+oembed" />
          <tag name="link" where="id=post-reactions-css|loggedout-subscribe-css|highlander-comments-css"/>
          <tag name="link" where="href=http://s0.wp.com/wp-content/themes/h4/global.css?m=1313010126g"/>
          <tag name="style" />
          <tag name="script" />
          <tag name="noscript" />
          <tag name="a" where="href=https://w3example.wordpress.com/wp-admin/" />
          <tag name="div" where="id=copyright|comments|bit"/>
          <tag name="div" where="class=comments|skip-content"/>
          <xpath xpath="//comment()[not(ancestor::script or ancestor::style)]"/>
        </remove>
        <!-- 
        Things to replace in the content, the expand="true" means that the replace tag's value attribute
        is evaluated for names of attributes in curly braces "{}" and replaced with the attribute value
        from the original element.  The constant {site.uri} will be replaced with the base target uri.
        -->
        <replace value="&lt;link rel='{rel}' href='{site.uri}api/{rel}' />" expand="true">
          <tag name="link" where="rel=pingback" />
        </replace>

        <!-- Kill any attributes on the html <head> element -->
        <replace value="">
          <match expression="&lt;head([^>]*)>" group_id="1"/>
        </replace>

        <!-- Condense whitespace, you probably don't what this if you have source code in your blog -->
        <replace value=" ">
          <match expression="\s+"/>
        </replace>
      </optimizing>

      <!-- The following tags are links of some kind, we need to follow the attribute specified -->
      <tag name="a" follow="href" mime="text/uri" where="rel!=nofollow">
        <!-- This can add additional attributes to test a match for a url -->
        <attribute name="title" mime="text/uri"/>
      </tag>
      <tag name="form" follow="action" />
      <tag name="img" follow="src" />
      <tag name="style" where="type=text/css" mime="text/css" />
      <tag name="script" follow="src" mime="text/javascript" />
      <tag name="link" follow="href" where="rel=stylesheet" />
      <tag name="link" follow="href" where="rel=alternate" />
      
    </doc-type>

    <!-- The handling of XML content -->
    <doc-type type="xml" mime="text/xml" ext=".xml" relative-links="false">
      <!-- When optimize is run we... -->
      <optimizing>
        <!-- remove the tag 'wfw:commentRss' who is a descendent of an element tag 'rss' -->
        <remove>
          <tag ancestor="rss" name="wfw:commentRss" />
          <xpath xpath="/rss/channel/cloud"/>
        </remove>
      </optimizing>

      <!-- These locate links in a typical rss feed -->
      <tag ancestor="rss" name="atom:link" follow="href" />
      <tag ancestor="rss" name="link" mime="text/uri" />
      <tag ancestor="rss" name="comments" mime="text/uri" />
      <tag ancestor="rss" name="guid" mime="text/uri" />
      <tag ancestor="rss" name="description" mime="text/html" />
      <tag ancestor="rss" name="content:encoded" mime="text/html" />
      <!-- We remove this, so we don't need to follow it -->
      <!--<tag ancestor="rss" name="wfw:commentRss" mime="text/uri" />-->

    </doc-type>
    
    <!-- The handling of text content that might be a link -->
    <doc-type type="text" mime="text/uri" relative-links="false">
      <!-- an http or https link that may be preceeded by or following by whitespace -->
      <match expression="(?is-:(?&lt;=^\s*)https?://[^\s]+(?=\s*$))" />
    </doc-type>

    <!-- The handling of CSS content -->
    <doc-type type="text" mime="text/css" ext=".css" relative-links="true">
      <!-- This expression is used to locate a link in the content -->
      <match expression="url\s?\(\s?(?:&quot;|')?(.*?)(?:&quot;|')?\s?\)" group_id="1" />
    </doc-type>

    <!-- The handling of JavaScript content -->
    <doc-type type="text" mime="text/javascript" ext=".js" relative-links="false">
      <!--The following are also valid mime types for javascript -->
      <alias mime="application/javascript" />
      <alias mime="application/x-javascript" />
      
      <!-- Look for http:// or http:// followed by non-whitespace and surrounded in quotes -->
      <match expression="(?is-:(?&lt;=&quot;)https?://[^\s&quot;]+(?=&quot;))" group_id="1" />

    </doc-type>
  </HttpCloneConfig>
</configuration>